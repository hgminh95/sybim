{% extends 'base.html' %}

{% block content %}
  <div class="row">
    <div class="video-container">
      <video id="video-player" preload="auto" class="real-player">
        <track kind="subtitles"/>
      </video>

      <div id="help-overlay">
        <div class="center-screen" style="color: white">
          <div id="owner-help-text" style="width: 40%; display: none">
            <h3>&#128079; You are the owner of the room</h3>
            <p style="text-align: left">
              Select the video you want to watch in the right side bar.
              You can play, pause, or seek to certain time in the video; and these actions
              will be applied to all other members of the room.
            </p>
          </div>

          <div id="member-help-text" style="width: 40%; display: none">
            <h3>&#128079; You have joined the room</h3>
            <p style="text-align: left">
              Select the same video as the owner's in the right side bar. You cannot control
              the video player. Just wait for the owner to start and enjoy watching.
            </p>
          </div>

          <div id="invalid-video-help-text" style="width: 40%; display: none">
            <h3>&#128549; Unsupported video type</h3>
            <div style="text-align: left">
              </p>
                The video cannot be played by the browser.
                Please convert the file to appropriate format.
              </p>
              <strong><u>For Linux:</u></strong>
              <p>Run following command in terminal
                <pre>$ ffmpeg -vcodec copy -acodec aac -ac 2 -ab 128k -i &lt;input_file&gt; &lt;output_file&gt;</pre>
              </p>
              <strong><u>For Windows:</u></strong>
              <p>Use this <a href="/static/SybimVideoConverter.exe" style="color: white">small utility</a> to convert your video file.</p>
            </div>
          </div>
        </div>
      </div>

      <div id="chat-pane">
        <div id="chat-wrapper">
          <p class="chat-line"></p>
          <input type="text" id="chat-input" placeholder="Press Enter to send" maxlength="64">
        </div>
        <p>
      </div>

      <div id="reconnect-overlay">
        <div class="center-screen">
          <div class="loader"></div>
          <h2 style="color: white">Connecting...</h2>
        </div>
      </div>

    </div>

    <h2 id="sidebar-open-btn" class="sybim-icon"
        style="cursor: pointer; position: absolute; top: 0; right: 1rem; display: none; color: white; z-index: 4">
      &#9776;
    </h2>
    <div id="sidebar" class="sidebar">
      <div class="title">
        &#127910; <a href="/">SyBim</a>
        <span id="sidebar-close-btn" class="sybim-icon" style="float: right; cursor: pointer">
          &#x25B6;
        </span>
      </div>

      <div class="section">
        <div class="header">
          ü§ô Invite Others? Use the link below
        </div>
        <div style="display: flex">
          <input id="room-link-share" readonly style="flex-grow: 1; font-family: monospace"/>
          <span id="copy-link-btn" style="margin-left: 1rem; margin-right: 1rem;">
            <span class="sybim-icon" style="position: relative; top: -.25em; left: -.125em; cursor: pointer">
              &#128196;<span style="position: absolute; top: .25em; left: .25em">&#128196;</span>
            </span>
          </span>
        </div>
      </div>

      <div class="section">
        <div class="header">üé¨ Video</div>

        <div class="toggle-btn">
          <div id="local-video-btn" class="active">üíª Local</div>
          <div id="remote-video-btn">üåê Remote</div>
        </div>

        <div id="local-video-section" style="display: block; margin-top: 1rem">
          <input id="video-input" type="file" accept="video/*" style="width: 100%"/>

          <p style="margin-bottom: 0">Select video from your own device.</p>
        </div>

        <div id="remote-video-section" style="display: none; margin-top: 1rem">
          <div style="display: flex">
            <input id="remote-link" style="flex-grow: 1; font-family: monospace" value=""
                placeholder="https://url.to/the/video"/>
            <span id="remote-link-btn"
                style="margin-left: 1rem; margin-right: 1rem; cursor: pointer">‚ñ∂Ô∏è</span>
          </div>

          <p style="margin-bottom: 0">Input video URL from Internet (Youtube, Vimeo, Dailymotion, etc).</p>
        </div>
      </div>

      <div class="section">
        <div class="header">üí¨ Subtitles</div>
        <div style="display:flex">
          <input id="subtitle-input" type="file" accept=".vtt,.srt" style="width: 100%"/>
          <span id="remove-subtitle-btn"
              style="margin-left: 1rem; margin-right: 1rem; cursor: pointer; display: none;">‚ùå</span>
        </div>
      </div>

      <div class="section">
        <div class="header">üíï Members (<span id="user-count-text">1</span>)</div>
        <div id="users-list"></div>
      </div>
    </div>
  </div>
  <div id="toast"></div>

  <script src="/static/srt_webvtt.js"></script>
  <script>
    var helpController = {
      hide() {
        $('help-overlay').style.display = 'none';
      },

      showOwnerHelp(overlay = true) {
        $('owner-help-text').style.display = 'block';
        $('member-help-text').style.display = 'none';
        $('invalid-video-help-text').style.display = 'none';

        if (overlay)
          $('help-overlay').style.display = 'inline-block';
      },

      showMemberHelp(overlay = true) {
        $('owner-help-text').style.display = 'none';
        $('member-help-text').style.display = 'block';
        $('invalid-video-help-text').style.display = 'none';

        if (overlay)
          $('help-overlay').style.display = 'inline-block';
      },

      showInvalidVideoTypeHelp() {
        $('owner-help-text').style.display = 'none';
        $('member-help-text').style.display = 'none';
        $('invalid-video-help-text').style.display = 'block';
        $('help-overlay').style.display = 'inline-block';
      }
    };

    var videoSelectionController = {
      init() {
        this.state = 'local';
        this.is_enable = true;
        this.local_video_btn = $('local-video-btn');
        this.remote_video_btn = $('remote-video-btn');

        this.local_video_section = $('local-video-section');
        this.remote_video_section = $('remote-video-section');

        this.source_callback = null;
        this.invalid_video_callback = null;

        this.local_video_btn.onclick = evt => {
          if (this.state !== 'local' && this.is_enable) {
            this.state = 'local';
            this.local_video_btn.classList.add('active');
            this.remote_video_btn.classList.remove('active');

            this.local_video_section.style.display = "block";
            this.remote_video_section.style.display = "none";
          }
        };

        this.remote_video_btn.onclick = evt => {
          if (this.state !== 'remote' && this.is_enable) {
            this.state = 'remote';
            this.local_video_btn.classList.remove('active');
            this.remote_video_btn.classList.add('active');

            this.local_video_section.style.display = "none";
            this.remote_video_section.style.display = "block";
          }
        };

        $("video-input").onchange = evt => {
          if (evt.target.files.length === 0)
            return;

          let file = evt.target.files[0];
          let canPlay = 'yes'; // videoPlayer.canPlayType(file.type);
          if (canPlay === '' || canPlay === 'no') {
            toast(`Cannot play selected video`);
            // helpController.showInvalidVideoTypeHelp(file.type);
            return;
          } else {
            this.source_callback && this.source_callback('local', URL.createObjectURL(file), file.type);
          }
        };

        $("remote-link-btn").onclick = evt => {
          if (!this.is_enable)
            return;

          let remote_url = $("remote-link").value;

          if (remote_url.startsWith('http://www.youtube.com/')
              || remote_url.startsWith('https://www.youtube.com/')
              || remote_url.startsWith('http://www.youtu.be/')
              || remote_url.startsWith('https://www.youtu.be/')) {
            this.source_callback && this.source_callback('remote', remote_url, 'video/youtube');
          } else {
            this.source_callback && this.source_callback('remote', remote_url);
          }
        };
      },

      registerSourceCallback(source_callback) {
        this.source_callback = source_callback;
      },

      switchTo(source, url) {
        if (source === 'local' && this.state !== 'local') {
          this.state = 'local';
          this.local_video_btn.classList.add('active');
          this.remote_video_btn.classList.remove('active');

          this.local_video_section.style.display = "block";
          this.remote_video_section.style.display = "none";
        }

        if (source === 'remote' && this.state !== 'remote') {
          this.state = 'remote';
          this.local_video_btn.classList.remove('active');
          this.remote_video_btn.classList.add('active');

          this.local_video_section.style.display = "none";
          this.remote_video_section.style.display = "block";

          $('remote-link').value = url;
        }
      },

      disable() {
        this.is_enable = false;

        this.local_video_btn.classList.add('disabled');
        this.remote_video_btn.classList.add('disabled');

        $('remote-link').disabled = true;
        $('remote-link-btn').style.display = "none";
      },

      enable() {
        this.is_enable = true;

        this.local_video_btn.classList.remove('disabled');
        this.remote_video_btn.classList.remove('disabled');

        $('remote-link').disabled = false;
        $('remote-link-btn').style.display = "inline";
      },
    }

    videoSelectionController.init();
  </script>

  <script>
    class HeartController {
      constructor() {
        this.duration = 9000;
        this.speed = 2.5;
        this.hearts = [];
        this.before = Date.now();

        this.eventLoop = this.eventLoop.bind(this);
        setInterval(this.eventLoop, 30);
      }

      generateHeart(type, x, y, xBound, xStart, scale) {
        var heart = document.createElement("DIV");
        heart.setAttribute('class', type);
        document.body.appendChild(heart);
        heart.time = this.duration;
        heart.x = x;
        heart.y = y;
        heart.bound = xBound;
        heart.direction = xStart;
        heart.style.left = heart.x + "px";
        heart.style.top = heart.y + "px";
        heart.scale = scale;
        heart.style.transform = "scale(" + scale + "," + scale + ")";
        this.hearts.push(heart);
        return heart;
      }

      eventLoop() {
        let current = Date.now();
        let deltaTime = current - this.before;
        this.before = current;
        for (let i in this.hearts) {
          let heart = this.hearts[i];
          heart.time -= deltaTime;
          if (heart.time > 0) {
            heart.y -= this.speed;
            heart.style.top = heart.y + "px";
            heart.style.left = heart.x + heart.direction * heart.bound * Math.sin(heart.y * heart.scale / 10) / heart.y * 200 + "px";
          } else {
            heart.parentNode.removeChild(heart);
            this.hearts.splice(i, 1);
          }
        }
      }
    }

    let heartController = new HeartController();
  </script>
  <script>
    class ApplicationController {
      constructor() {
        this.socket = null;
        this.retryTimer = null;
        this.heartbeatTimer = null;
        this.videoPlayer = null;
        this.isOwner = false;
        this.isConnected = false;
        this.room = '';
        this.hasVideo = false;
        this.prevUrl = '';
        this.userColors = {};
        this.username = 'you';
      }

      connectToRoom(room) {
        if (this.room === '') { /* first time connect */
          setTimeout(() => {
            if (!this.isConnected) {
              $("reconnect-overlay").style.display = "block";
            }
          }, 5000);
        }

        this.room = room;
        this.socket = new SybimSocket(getWSAddr(), room,
            localStorage.getItem('token'),
            localStorage.getItem('nickname'));

        this.socket.onopen = () => {
          this.isConnected = true;
          $("reconnect-overlay").style.display = "none";
          this.insertNewChat('sybim', 'Welcome! Have Fun (:');
        };

        this.socket.onmessage = msg => {
          this.onMsgRecv(msg);
        };

        this.socket.onunstable = () => {
          this.isConnected = false;
          $("reconnect-overlay").style.display = "block";
        };

        this.socket.connect();
      }

      onBecomeOwner() {
        this.insertNewChat('sybim', 'You are the owner');
        toast("You are the owner");
        this.isOwner = true;
        this.videoPlayer.EnableControls();
        helpController.showOwnerHelp(!this.hasVideo);

        videoSelectionController.enable();
      }

      onBecomeMember() {
        toast("Joined");
        this.isOwner = false;
        this.videoPlayer.DisableControls();
        helpController.showMemberHelp(!this.hasVideo);

        videoSelectionController.disable();
      }

      onMsgRecv(msg) {
        if (msg === "n") {
          window.location.href = '/';
        }

        if (msg === "x") {
          window.location.href = `/j/${this.room}`;
        }

        if (msg === "hb") {
        } else {
          let tokens = msg.split('|');

          if (tokens[0] == 'r') {
            if (tokens[1] == 'o') {
              this.isConnected = true;
              this.onBecomeOwner();
            } else if (tokens[1] == 's') {
              this.onBecomeMember();
            }

            this.username = tokens[2];
          } else if (tokens[0] === 'chat') {
            this.onChatReceived(tokens[1], tokens[2]);
          } else if (tokens[0] === 'user_list') {
            $('user-count-text').innerHTML = tokens.length - 2;
            this.renderUsersList(tokens.slice(1));
          } else if (tokens[0] === 'source') {
            if (tokens.length === 4) {
              if (tokens[1] !== 'local') {
                this.onNewURL(tokens[1], tokens[2], tokens[3]);
              } else {
                videoSelectionController.switchTo(tokens[1], tokens[2]);
              }
            }
          } else {
            if (!this.hasVideo)
              return;

            if (tokens[0] === 'play') {
              this.videoPlayer.SeekTo(parseFloat(tokens[1]));
              this.videoPlayer.Play();
            } else if (tokens[0] === 'pause') {
              this.videoPlayer.SeekTo(parseFloat(tokens[1]));
              this.videoPlayer.Pause();
            } else if (tokens[0] === 'seek') {
              this.videoPlayer.SeekTo(parseFloat(tokens[1]));
            } else if (tokens[0] === 'loop') {
              if (tokens[1] == '1')
                this.videoPlayer.SetLoop(true);
              else
                this.videoPlayer.SetLoop(false);
            } else {
              console.log('Unknown message: ' + tokens[0]);
            }
          }
        }
      }

      onNewURL(source, url, type) {
        // Workaround, might remove later
        if (type === 'undefined')
          type = undefined;

        if (this.prevUrl === url)
          return;

        console.log(`[sybim] [debug] New Source: ${source} ${type} ${url}`);

        this.prevUrl = url;

        helpController.hide();

        this.hasVideo = true;

        this.videoPlayer.SetSource(SelectPlayer(url), url);

        if (this.isOwner) {
          this.socket.send(`c|b|source|${source}|${url}|${type}`);
        }

        videoSelectionController.switchTo(source, url);
      }

      attachVideoPlayer(videoPlayer) {
        this.videoPlayer = videoPlayer;

        this.videoPlayer.RegisterSyncEventCallback((status, time) => {
          if (this.isOwner) {
            this.socket.send(`c|b|${status}|${time}`);
          }
        });

        this.videoPlayer.RegisterOnReadyCallback(() => {
          if (!this.isOwner) {
            this.requestStatus();
          }
        });
      }

      requestStatus() {
        this.socket.send("c|rs");
      }

      sendChat(msg) {
        this.socket.send(`c|b|chat|${this.username}|${msg}`);

        this.insertNewChat(this.username, msg);

        this.sendLove(msg);
      }

      onChatReceived(other_ppl, msg) {
        this.insertNewChat(other_ppl, msg);

        let chatPane = document.getElementById('chat-pane');
        chatPane.style.opacity = 1;
        clearTimeout(this.hideChatPaneAction);
        this.hideChatPaneAction = setTimeout(() => {
          chatPane.style.removeProperty('opacity');
        }, 5000);

        this.sendLove(msg);
      }

      insertNewChat(user, msg) {
        let chatLine = document.createElement('p');
        chatLine.className = 'chat-line';

        let userSpan = document.createElement('span');
        userSpan.className = 'username';
        userSpan.innerHTML = `${user}:`;
        if (user === this.username) {
          userSpan.style.backgroundColor = 'bisque';
          userSpan.style.fontWeight = 'bold';
        } else if (user === 'sybim' || user === 'sybim_error') {
          userSpan.style.backgroundColor = 'mediumpurple';
          userSpan.style.fontWeight = 'bold';
          userSpan.innerHTML = 'sybim:';
        } else {
          if (!(user in this.userColors)) {
            this.userColors[user] = generateRandomLightColor();
          }
          userSpan.style.backgroundColor = this.userColors[user];
        }

        let contentSpan = document.createElement('span');
        contentSpan.className = 'content';
        contentSpan.innerHTML = msg;
        if (user === 'sybim_error') {
          contentSpan.style.color = 'indianred';
          contentSpan.style.fontWeight = 'bold';
        }
        chatLine.appendChild(userSpan)
        chatLine.appendChild(contentSpan);

        document.querySelector('.chat-line:last-of-type').after(chatLine);
      }

      sendLove(msg) {
        let love_counts = (msg.match(/love/g) || []).length;
        for (let i = 0; i < love_counts; ++i) {
          let start = 1 - Math.round(Math.random()) * 2;
          let scale = Math.random() * Math.random() * 0.8 + 0.2;
          let bound = 50 + Math.random() * 100;
          let x = Math.random() * document.body.clientWidth;
          let y = document.body.clientHeight - 50 - Math.random() * 50;
          heartController.generateHeart('heart', x, y, bound, start, scale);
        }

        let eww_counts = (msg.match(/eww/g) || []).length;
        for (let i = 0; i < eww_counts; ++i) {
          let start = 1 - Math.round(Math.random()) * 2;
          let scale = Math.random() * Math.random() * 0.8 + 2;
          let bound = 30 + Math.random() * 50;
          let x = Math.random() * document.body.clientWidth;
          let y = document.body.clientHeight - 50 - Math.random() * 50;
          heartController.generateHeart('eww', x, y, bound, start, scale);
        }

        let wink_counts = (msg.match(/wink/g) || []).length;
        for (let i = 0; i < wink_counts; ++i) {
          let start = 1 - Math.round(Math.random()) * 2;
          let scale = Math.random() * Math.random() * 0.8 + 2;
          let bound = 30 + Math.random() * 50;
          let x = Math.random() * document.body.clientWidth;
          let y = document.body.clientHeight - 50 - Math.random() * 50;
          heartController.generateHeart('wink', x, y, bound, start, scale);
        }
      }

      renderUsersList(users) {
        // Last item in the list is owner name
        let owner_name = users[users.length - 1];

        let usersListDom = $('users-list');
        usersListDom.innerHTML = '';
        for (let user of users.slice(0, users.length - 1)) {
          let memberDiv = document.createElement('div');
          memberDiv.className = 'member';

          if (this.isOwner) {
            if (user === this.username) {
              memberDiv.className = 'member owner';
              memberDiv.innerHTML = `${user}`;
            } else {
              memberDiv.innerHTML = `${user} <div class="promote-btn" onclick="controller.promote('${user}')"></div>`;
            }
          } else {
            if (user == owner_name) {
              memberDiv.className = 'member owner';
            }
            memberDiv.innerHTML = `${user}`;
          }

          usersListDom.appendChild(memberDiv);
        }
      }

      promote(user) {
        this.socket.send(`c|p|${user}`);
      }
    }
  </script>
  <script>
    let room = window.location.pathname.split('/').pop();
    $("room-link-share").value = window.location.protocol + "//" + window.location.host +
        "/j/" + room;
    $("copy-link-btn").onclick = e => {
      $("room-link-share").select();
      document.execCommand("copy");

      toast('Link Copied');
    }

    let videoPlayer = new SybimVideoPlayer({
      selector: '#video-player'
    });

    let controller = new ApplicationController;

    controller.connectToRoom(room);
    controller.attachVideoPlayer(videoPlayer);

    videoSelectionController.registerSourceCallback(
        controller.onNewURL.bind(controller));

    $("subtitle-input").onchange = evt => {
      let file = evt.target.files[0];

      const vttConverter = new WebVTTConverter(file);
      vttConverter
          .getURL()
          .then(url => {
            videoPlayer.SetSubtitle(url);
            $('remove-subtitle-btn').style.display = 'inline';

            toast('New subtitle loaded');
          })
          .catch(err => {
            toast('Failed to load subtitle file');
            console.log('Error: ' + err)
          });
    }

    $('remove-subtitle-btn').onclick = evt => {
      videoPlayer.RemoveSubtitle();
      $("subtitle-input").value = '';
      evt.target.style.display = 'none';

      toast('Subtitle removed');
    }

    $("chat-input").onkeyup = evt => {
      if (evt.keyCode == 13) {
        controller.sendChat(evt.target.value);
        evt.target.value = '';
      }
    }

    $("sidebar-close-btn").onclick = evt => {
      $("sidebar").style.display = "none";
      $("sidebar-open-btn").style.display = "block";
    };
    $("sidebar-open-btn").onclick = evt => {
      $("sidebar").style.display = "block";
      $("sidebar-open-btn").style.display = "none";
    };
  </script>
{% endblock %}
